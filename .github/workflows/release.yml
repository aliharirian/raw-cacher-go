name: Release & Publish

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

env:
  DOCKER_IMAGE: aliharirian/raw-cacher-go

jobs:
  semver:
    name: Determine Version (semantic-release)
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.after.outputs.tag }}
      version: ${{ steps.after.outputs.version }}
      no_new_release: ${{ steps.decide.outputs.no_new_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # semantic-release needs full history

      # Create a release config on-the-fly (no npm publish plugin)
      - name: Write .releaserc.json
        run: |
          cat > .releaserc.json <<'JSON'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", { "preset": "conventionalcommits" }],
              ["@semantic-release/release-notes-generator", { "preset": "conventionalcommits" }],
              ["@semantic-release/changelog", { "changelogFile": "CHANGELOG.md" }],
              ["@semantic-release/github"],
              ["@semantic-release/git", {
                "assets": ["CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }]
            ]
          }
          JSON
          cat .releaserc.json

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Install semantic-release and only the plugins we use (no npm plugin)
      - name: Install semantic-release
        run: |
          npm -g i \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            conventional-changelog-conventionalcommits \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator

      - name: Previous tag (before)
        id: before
        run: |
          git fetch --tags --force || true
          PREV=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "prev=${PREV}" >> $GITHUB_OUTPUT
          echo "Previous tag: ${PREV}"

      - name: Run semantic-release
        id: semrel
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Creates/updates GitHub Release & tag if commits since last tag warrant a new version
          npx semantic-release --no-ci

      - name: Latest tag (after)
        id: after
        run: |
          git fetch --tags --force
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
          echo "Latest tag: ${TAG}; version: ${TAG#v}"

      - name: Decide if a new release was created
        id: decide
        run: |
          if [ "${{ steps.before.outputs.prev }}" = "${{ steps.after.outputs.tag }}" ] || [ -z "${{ steps.after.outputs.tag }}" ]; then
            echo "no_new_release=true" >> $GITHUB_OUTPUT
            echo "No new release created."
          else
            echo "no_new_release=false" >> $GITHUB_OUTPUT
            echo "New release: ${{ steps.after.outputs.tag }}"
          fi

  docker:
    name: Build & Push Docker (latest + version tags)
    needs: semver
    if: ${{ needs.semver.outputs.no_new_release == 'false' && needs.semver.outputs.tag != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (linux/amd64, linux/arm64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ needs.semver.outputs.version }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ needs.semver.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:${{ needs.semver.outputs.tag }}

  binaries:
    name: Build & Upload Binaries (macOS/Linux)
    needs: semver
    if: ${{ needs.semver.outputs.no_new_release == 'false' && needs.semver.outputs.tag != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [ linux ]
        goarch: [ amd64, arm64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ needs.semver.outputs.version }}
        run: |
          mkdir -p dist
          BIN_NAME=raw-cacher-go_${GOOS}_${GOARCH}
          if [ "${GOOS}" = "windows" ]; then BIN_NAME="${BIN_NAME}.exe"; fi
          go build -trimpath -ldflags "-s -w -X main.version=${VERSION}" -o "dist/${BIN_NAME}" ./cmd/server

      - name: Upload binaries to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.semver.outputs.tag }}
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
